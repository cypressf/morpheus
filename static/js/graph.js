// Generated by CoffeeScript 1.3.3
(function() {
  var Sleep, User, chartC, chartO, currentInteractionState, dateFromPosFrac, formatTime, globalChartCOffset, mainUser, position, randint, resizeChart, resizeLines, ticks, updateCurrent, updateOverview;

  randint = function(a, b) {
    return Math.floor(Math.random() * (b - 1) + a);
  };

  User = (function() {

    function User(name) {
      this.name = name;
      this.sleeps = [];
    }

    return User;

  })();

  Sleep = (function() {

    function Sleep(start, end) {
      this.start = start;
      this.end = end;
      this.start = new Date(this.start);
      this.end = new Date(this.end);
    }

    return Sleep;

  })();

  mainUser = new User('Gomez');

  chartO = d3.select("#overview-chart");

  chartC = d3.select("#current-chart");

  globalChartCOffset = {
    top: 50
  };

  updateOverview = function() {
    var h;
    h = $('#overview-chart').height();
    return chartO.selectAll("rect").data(mainUser.sleeps).enter().append("rect").attr("x", function(d, i) {
      return i * 6;
    }).attr("y", function(d, i) {
      return position(d.start) * h;
    }).attr("height", function(d, i) {
      return (position(d.end) - position(d.start)) * h;
    }).attr("width", 5);
  };

  formatTime = function(d) {
    var amPm, hours, mins;
    hours = d.getHours(d);
    mins = d.getMinutes(d) + '';
    amPm = ' am';
    if (hours > 11) {
      hours -= 12;
      amPm = ' pm';
    }
    if (hours === 0) {
      amPm = ' am';
      hours = 12;
    }
    if (mins.length === 1) {
      mins = '0' + mins;
    }
    return hours + ':' + mins + amPm;
  };

  updateCurrent = function() {
    var h, the_ticks, tick_count, tw;
    tick_count = 8;
    the_ticks = ticks(tick_count);
    h = $('#current-chart').height() - globalChartCOffset.top;
    tw = $('#current-chart').width();
    chartC.selectAll("rect").data(mainUser.sleeps.slice(-7)).enter().append("rect").attr("y", function(d, i) {
      return position(d.start) * h + globalChartCOffset.top;
    }).attr("height", function(d, i) {
      return (position(d.end) - position(d.start)) * h;
    }).attr("width", function(d, i) {
      return 60;
    }).attr("x", function(d, i) {
      return i * 62;
    });
    chartC.selectAll("line").data(the_ticks).enter().append("line").attr("y1", function(d) {
      return position(d) * h;
    }).attr("y2", function(d) {
      return position(d) * h;
    }).attr("x1", 0).attr("x2", tw).style("stroke", "rgba(100,100,100,0.3)");
    return chartC.selectAll(".rule").data(the_ticks).enter().append("text").attr("class", "rule").attr("y", function(d) {
      return position(d) * h;
    }).attr("x", 0).attr("dx", 20).text(function(d) {
      return formatTime(d);
    }).attr("text-anchor", "middle");
  };

  resizeChart = function(chart, idStr, elementCount, spacing) {
    var h, tw, w;
    if (spacing == null) {
      spacing = 1;
    }
    h = $(idStr).height() - globalChartCOffset.top;
    tw = $(idStr).width();
    w = tw / (elementCount + spacing / 2);
    if (w < 5) {
      w = 5;
    }
    return chart.selectAll("rect").transition().duration(0).attr("height", function(d, i) {
      return (position(d.end) - position(d.start)) * h;
    }).attr("width", function(d, i) {
      return w;
    }).attr("x", function(d, i) {
      return (i * (w + spacing)) + (tw - (w + spacing) * (elementCount + 1));
    }).attr("y", function(d, i) {
      return position(d.start) * h + globalChartCOffset.top;
    });
  };

  resizeLines = function() {
    var h, tw;
    h = $('#current-chart').height() - globalChartCOffset.top;
    tw = $('#current-chart').width();
    chartC.selectAll("line").transition(0).duration(0).attr("y1", function(d) {
      return position(d) * h + globalChartCOffset.top;
    }).attr("y2", function(d) {
      return position(d) * h + globalChartCOffset.top;
    }).attr("x1", 0).attr("x2", tw);
    return chartC.selectAll(".rule").transition(0).duration(0).attr("y", function(d) {
      return position(d) * h + globalChartCOffset.top;
    }).attr("x", 0).attr("dx", 35);
  };

  position = function(d) {
    return ((d.getHours() + d.getMinutes() / 60 + d.getSeconds() / (60 * 60)) / 24 + 0.25) % 1;
  };

  window.position = position;

  dateFromPosFrac = function(x, y) {
    var d, hours, minutes, seconds, vert, vertScaled;
    vert = (y - 0.25) % 1;
    vertScaled = vert * 24;
    hours = vertScaled;
    minutes = (hours % 1) * 60;
    seconds = (minutes % 1) * 60 * 60;
    d = new Date();
    d.setHours(hours);
    d.setMinutes(minutes);
    d.setSeconds(seconds);
    return d;
  };

  ticks = function(n) {
    var hours, minute_fraction, minutes, second_fraction, seconds, tick, _i, _ref;
    ticks = [];
    for (tick = _i = 0, _ref = 1 / n; _i <= 1; tick = _i += _ref) {
      tick = (tick - 0.25) % 1;
      if (tick < 0) {
        tick += 1;
      }
      hours = tick * 24;
      minute_fraction = hours % 1;
      minutes = minute_fraction * 60;
      second_fraction = minute_fraction % 1;
      seconds = second_fraction * 60;
      ticks.push(new Date(2012, 1, 1, hours, minutes, seconds));
    }
    return ticks;
  };

  currentInteractionState = {
    isMakingBar: false
  };

  $('#current-chart').mousemove(function(e) {
    var d, h, x, y;
    h = $('#current-chart').height() - globalChartCOffset.top;
    x = e.pageX - this.offsetLeft;
    y = e.pageY - this.offsetTop + globalChartCOffset.top;
    return d = dateFromPosFrac(x, y / h);
  });

  window.morpheus.getDataForUser((function(response) {
    var newSleep, s, _i, _len;
    for (_i = 0, _len = response.length; _i < _len; _i++) {
      s = response[_i];
      newSleep = new Sleep(s.start, s.end);
      mainUser.sleeps.push(newSleep);
    }
    updateOverview();
    updateCurrent();
    resizeChart(chartO, '#overview-chart', mainUser.sleeps.length);
    resizeChart(chartC, '#current-chart', 7, 10);
    return resizeLines();
  }), 'Gomez');

  $(window).resize(function() {
    resizeChart(chartO, '#overview-chart', mainUser.sleeps.length);
    resizeChart(chartC, '#current-chart', 7, 10);
    return resizeLines();
  });

}).call(this);
